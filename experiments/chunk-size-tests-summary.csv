schedule type,chunk size,matrix size,time (ms),Gigaentries per second
sequential,0,256,1.235328,0.005305
sequential,0,512,10.518959,0.002492
sequential,0,1024,77.818696,0.001347
sequential,0,2048,1721.990168,0.000244

# best from outer for loop parallelized
static,16,256,1.260518,0.005199
static,32,512,4.190277,0.006256
static,16,1024,22.208287,0.004722
static,64,2048,247.022989,0.001698

dynamic,16,256,1.644761,0.003985
dynamic,8,512,10.009656,0.002619
dynamic,64,1024,54.638052,0.001919
dynamic,128,2048,638.416137,0.000657

guided,32,256,1.782762,0.003676
guided,64,512,10.189007,0.002573
guided,4,1024,61.787890,0.001697
guided,2,2048,626.389688,0.000670

# - for matrix size 256, sequential was fastest, regardless of schedule
# - for matrix size 512, schedule(static, 32) outperformed sequential by a
#   factor of 3. Other schedules performed similarly to sequential.
# - for matrix size 1024, schedule(static, 16) outperformed sequential by a
#   factor of ~4. Other schedules performed similarly to sequential.
# - for matrix size 2048, schedule(static, 64) outperformed sequential by a
#   factor of ~6. Other schedules also outperformed sequential.

# best from inner for loop parallelized

# best from collapsed for loops parallelized
