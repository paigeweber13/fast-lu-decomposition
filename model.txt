# Initial model

flops:
 - compute multiplier n^2/2 times
 - multiply and add for for every entry: 2n^2 times
 - invert mul for lower matrix n^2/2 times

so for matrix of size n, doing 3n^2 flops
so for each entry, doing 3 flop

mem:
 - read 2 for mul for lower triangle entries: n^2
 - read above row for mul/add: n^2
 - read/write self: n^2
 - write mul once: n^2 (could be combined with one of the reads above for a 
   r/w)

 - reads: 3n^2
 - writes: 2n^2

so for each entry, doing 2*(datatype size) read/write

simplified function for matrix of size n:
flops: 3n^2
r/w mem access: 2n^2 * (datatype size)

Theoretical entries per second
 - (flops/s) / (flops per entry)
 - (r/w bandwidth) / (r/w memops per entry)

on CPU:
 - using broadwell cores:
    mba-c5.uncc.edu
    mba-c6.uncc.edu
    mba-c7.uncc.edu
    mba-c8.uncc.edu
 - measured values:
   - 1.7 TFLOPS
   - 136 GB/s 
 - entries/s flop limit = 1.7e12/3
                        = 566e9 entries/second
                        = 566 Giga-entries/second
 - entries/s mem limit = 136e9/(2 * datatype_size)
                       = 136e9/16
                       = 8.5e9 entries/second
                       = 8.5 Giga-entries/second
